//module.exports = readDirectory;



//getPathsOfRoute("E:/LABORATORIA/LIM009-fe-md-links/prueba").then(res=>console.log(res))
//getPathsOfRoute('/home/leslie/Documents/LIM009-fe-md-links/src/index.js').then(res=>console.log(res))


/*

 async function getPathsOfRoute(route){
  let allRoutes = [];
  const checkRoute = await checkRouteIsFile(route);  
  if(checkRoute){  
    allRoutes.push(route); 
  }  
  else{    
    const readDirector  = await readDirectory(route)    
    readDirector.forEach(paths=> {       
      let file = path.join(route, paths)
      allRoutes = allRoutes.concat(getPathsOfRoute(file))
    });      
  }  
//return allRoutes
  return Promise.all(allRoutes).then(res =>Array.prototype.concat(...res))
}
*/
/*
const miFuncion = new Promise((resolve,reject)=>{})
miFuncion.then((res) => console.log(res))
.catch((err) => console.log(err))
async function miFuncionAsincrona(a, b) {
  arr = []
  const leerFuncion = await miFuncion();
  const nuevoPaso = await leerFuncion.concat(=>)
  const suma = await nuevoPaso.split
}
*/










/*
const getPathsOfRoute = async (route) => {
  let allRoutes = [];
    const checkRoute = await checkRouteIsFile(route);   // cuando se resulve la promesa mostrara true o false segun sea el caso
    if(checkRoute){
      const promise = new Promise((resolve)=>{
        resolve(route)
      })
      allRoutes.push(promise)
    }
    else{
      const readDirector = await readDirectory(route)
      const tot = readDirector.map(paths=> {
      let file = path.join(route, paths)
      return getPathsOfRoute(file)
      });
      //console.log('tot'); console.log(tot)
      const arr = await Promise.all(tot)  /// Resolver las promesas de las sub-carpetas
      //console.log('arr');console.log(arr)
      const newArr = Array.prototype.concat(...arr); // concatenamos totalas promesas
     // console.log('newArr');console.log(newArr)
      return newArr
    }
    const total = await Promise.all(allRoutes); // Resuelve la promesas del array ALLROUTES
    //console.log('total');  console.log(total);
    return total
}*/